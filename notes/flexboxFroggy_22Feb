Flexbox Froggy answers:
1
#pond {
  display: flex;
flex-direction: row-reverse;
}
2
#pond {
  display: flex;
justify-content: center;
}
3
#pond {
  display: flex;
justify-content: space-around;
}
4
#pond {
  display: flex;
justify-content: space-between;
}
5
#pond {
  display: flex;
align-items: flex-end;
}
6
#pond {
  display: flex;
align-items: center;
justify-content: center;
}
7
#pond {
  display: flex;
justify-content: space-around;
align-items: flex-end;
}
8
#pond {
  display: flex;
flex-direction: row-reverse;
}
9
#pond {
  display: flex;
flex-direction: column;
}
10
#pond {
  display: flex;
flex-direction: row-reverse;
justify-content: flex-end;
}
11
#pond {
  display: flex;
justify-content: flex-end;
flex-direction: column;
}
12
#pond {
  display: flex;
flex-direction: column-reverse;
justify-content: space-between;
}
13
#pond {
  display: flex;
flex-direction: row-reverse;
justify-content: center;
align-items: flex-end;
}
14
#pond {
  display: flex;
}
.yellow {
order: 1;
}
15
#pond {
  display: flex;
}
.red {
order: -3;
}
16
#pond {
  display: flex;
  align-items: flex-start;
}
.yellow {
order: 1;
align-self: flex-end;
}
17
#pond {
  display: flex;
  align-items: flex-start;
}
.yellow {
order: 1;
align-self: flex-end;
}
18
#pond {
  display: flex;
flex-wrap: wrap;
}
19
#pond {
  display: flex;
flex-direction: column;
flex-wrap: wrap;
}
20
#pond {
  display: flex;
flex-flow: column wrap;
}
21
#pond {
  display: flex;
  flex-wrap: wrap;
align-content: flex-start;
}
22
#pond {
  display: flex;
  flex-wrap: wrap;
align-content: flex-end;
}
23
#pond {
  display: flex;
  flex-wrap: wrap;
flex-direction: column-reverse;
align-content: center;
}
24
#pond {
  display: flex;
flex-flow:column-reverse wrap-reverse;
justify-content:center;
align-content:space-between;
}

align-content
sets how multiple lines are spaced apart from each other. This property takes the following values:
flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
Align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.

align-items
aligns items vertically and accepts the following values:
flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.

align-self. This property accepts the same values as align-items and its value for the specific item

flex-direction.
defines the direction items are placed in the container, and accepts the following values:
row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top.

flex-wrap
accepts the following values:
nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.

flex-flow
Shorthand property for flex-direction and flex-wrap.
<flex-direction>    <flex-wrap> e.g.:
column              wrap
row                 wrap-reverse
row-reverse         wrap

justify-content
aligns items horizontally and accepts the following values:
flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.

order
Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).

